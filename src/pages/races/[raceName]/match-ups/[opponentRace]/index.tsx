import { BuildOrder } from "@prisma/client";
import Head from "next/head";
import { useRouter } from "next/router";
import React, { ChangeEvent, useState } from "react";
import BuildCard from "../../../../../components/BuildCard";
import BuildTypeToggles from "../../../../../components/BuildTypeToggles";
import Input from "../../../../../components/Input";
import Label from "../../../../../components/Label";
import { trpc } from "../../../../../utils/trpc";
import { buildTypes } from "../../../../submit-build";

type TBuildSearchProps = {
  value: string;
  onChange: (e: ChangeEvent<HTMLInputElement>) => void;
};

const BuildSearch: React.FC<TBuildSearchProps> = ({ value, onChange }) => {
  return (
    <fieldset className="w-full">
      <Label htmlFor="build-search">
        Filter
        <Input
          id="build-search"
          type="text"
          value={value}
          onChange={onChange}
          className="mt-2 min-w-full"
        />
        <p className="mt-[.125rem] px-1 text-left text-xs text-white text-opacity-75">
          by name, author, or description
        </p>
      </Label>
    </fieldset>
  );
};

const MatchUpsPage = () => {
  const router = useRouter();
  const { raceName = "", opponentRace = "" } = router.query;
  const [selectedBuildType, setSelectedBuildType] = useState("all");
  const [searchBuild, setSearchBuild] = useState("");

  const matchUp = `${raceName[0]?.toLowerCase()}v${opponentRace[0]?.toLowerCase()}`;
  const builds = trpc.builds.getBuildsByMatchUp.useQuery(
    { matchUp },
    { initialData: [] }
  );

  // Handle Filters
  const lowerCaseSearch = searchBuild.toLowerCase();
  const filteredBuilds = builds.data
    .filter((build) =>
      selectedBuildType === "all" ? true : build.buildType === selectedBuildType
    )
    .filter((build) =>
      lowerCaseSearch !== ""
        ? ["author", "title", "description"].some((key) =>
            build[key as keyof BuildOrder]
              ?.toLowerCase()
              .includes(lowerCaseSearch)
          )
        : true
    );

  let firstRace = "";
  let secondRace = "";
  if (raceName && opponentRace) {
    firstRace = raceName[0]!.toUpperCase() + raceName.slice(1);
    secondRace = opponentRace[0]!.toUpperCase() + opponentRace.slice(1);
  }

  return (
    <>
      <Head>
        <title>SC2 Build Order Manager</title>
        <meta name="description" content="Generated by create-t3-app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      <h1 className="mt-6 text-center text-3xl font-bold text-white">
        {firstRace} vs {secondRace}
      </h1>
      <div className="container mx-auto mt-6 flex max-w-[80%] flex-col items-center justify-start gap-6 text-black dark:text-white">
        <div className="flex flex-col gap-6 md:w-full md:flex-row md:justify-start lg:gap-12">
          <form className="flex md:flex-shrink-0 ">
            <section className="flex flex-grow flex-col gap-4">
              <BuildSearch
                value={searchBuild}
                onChange={(e) => setSearchBuild(e.target.value)}
              />
              <BuildTypeToggles
                handleBuildTypeChange={setSelectedBuildType}
                selectedBuildType={selectedBuildType}
              />
            </section>
          </form>
          <section>
            <div className="grid grid-cols-1 gap-8 lg:grid-cols-2 xl:grid-cols-3">
              {filteredBuilds.map((build) => (
                <BuildCard key={build.id} build={build} />
              ))}
            </div>
          </section>
        </div>
      </div>
    </>
  );
};

export default MatchUpsPage;

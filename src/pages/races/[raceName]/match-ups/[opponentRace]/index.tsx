import { BuildOrder } from "@prisma/client";
import Head from "next/head";
import { useRouter } from "next/router";
import React, { ChangeEvent, useState } from "react";
import BuildCard from "../../../../../components/BuildCard";
import BuildTypeToggles from "../../../../../components/BuildTypeToggles";
import Input from "../../../../../components/Input";
import Label from "../../../../../components/Label";
import { trpc } from "../../../../../utils/trpc";
import { buildTypes } from "../../../../submit-build";

type TBuildSearchProps = {
  value: string;
  onChange: (e: ChangeEvent<HTMLInputElement>) => void;
};

const BuildSearch: React.FC<TBuildSearchProps> = ({ value, onChange }) => {
  return (
    <fieldset className="w-full">
      <Label htmlFor="build-search">
        Filter (by name, author, or description)
        <Input
          id="build-search"
          type="text"
          value={value}
          onChange={onChange}
          className="mt-2 min-w-full"
        />
      </Label>
    </fieldset>
  );
};

const MatchUpsPage = () => {
  const router = useRouter();
  const { raceName = "", opponentRace = "" } = router.query;
  const [selectedBuildType, setSelectedBuildType] = useState(
    buildTypes[0]!.toLowerCase()
  );
  const [searchBuild, setSearchBuild] = useState("");

  const matchUp = `${raceName[0]?.toLowerCase()}v${opponentRace[0]?.toLowerCase()}`;
  const builds = trpc.builds.getBuildsByMatchUp.useQuery(
    { matchUp },
    { initialData: [] }
  );

  // Handle Filters
  const lowerCaseSearch = searchBuild.toLowerCase();
  const filteredBuilds = builds.data
    .filter((build) => build.buildType === selectedBuildType)
    .filter((build) =>
      lowerCaseSearch !== ""
        ? ["author", "title", "description"].some((key) =>
            build[key as keyof BuildOrder]
              ?.toLowerCase()
              .includes(lowerCaseSearch)
          )
        : true
    );

  let firstRace = "";
  let secondRace = "";
  if (raceName && opponentRace) {
    firstRace = raceName[0]!.toUpperCase() + raceName.slice(1);
    secondRace = opponentRace[0]!.toUpperCase() + opponentRace.slice(1);
  }

  return (
    <>
      <Head>
        <title>SC2 Build Order Manager</title>
        <meta name="description" content="Generated by create-t3-app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      <div className="container mx-auto flex max-w-[80%] flex-col items-center justify-center gap-8 py-6 text-black dark:text-white">
        <h1 className="text-3xl font-bold">
          {firstRace} vs {secondRace}
        </h1>
        <form className="w-full">
          <section className="mx-auto grid w-full grid-cols-1 gap-8 lg:grid-cols-2">
            <BuildSearch
              value={searchBuild}
              onChange={(e) => setSearchBuild(e.target.value)}
            />
            <BuildTypeToggles
              handleBuildTypeChange={setSelectedBuildType}
              selectedBuildType={selectedBuildType}
            />
          </section>
        </form>
        <section>
          <div className="grid grid-cols-1 gap-8 md:grid-cols-2 lg:grid-cols-3">
            {filteredBuilds.map((build) => (
              <BuildCard key={build.id} build={build} />
            ))}
          </div>
        </section>
      </div>
    </>
  );
};

export default MatchUpsPage;
